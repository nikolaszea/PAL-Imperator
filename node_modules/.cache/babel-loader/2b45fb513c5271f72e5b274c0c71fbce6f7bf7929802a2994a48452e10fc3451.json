{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Header = exports.Track = exports.Midi = void 0;\nvar midi_file_1 = require(\"midi-file\");\nvar Header_1 = require(\"./Header\");\nvar Track_1 = require(\"./Track\");\nvar Encode_1 = require(\"./Encode\");\n/**\n * The main midi parsing class.\n */\nvar Midi = /** @class */function () {\n  /**\n   * Parse the midi data\n   */\n  function Midi(midiArray) {\n    var _this = this;\n    // Parse the MIDI data if there is any.\n    var midiData = null;\n    if (midiArray) {\n      // Transform midiArray to ArrayLike<number>\n      // only if it's an ArrayBuffer.\n      var midiArrayLike = midiArray instanceof ArrayBuffer ? new Uint8Array(midiArray) : midiArray;\n      // Parse MIDI data.\n      midiData = (0, midi_file_1.parseMidi)(midiArrayLike);\n      // Add the absolute times to each of the tracks.\n      midiData.tracks.forEach(function (track) {\n        var currentTicks = 0;\n        track.forEach(function (event) {\n          currentTicks += event.deltaTime;\n          event.absoluteTime = currentTicks;\n        });\n      });\n      // Ensure at most one instrument per track.\n      midiData.tracks = splitTracks(midiData.tracks);\n    }\n    this.header = new Header_1.Header(midiData);\n    this.tracks = [];\n    // Parse MIDI data.\n    if (midiArray) {\n      // Format 0, everything is on the same track.\n      this.tracks = midiData.tracks.map(function (trackData) {\n        return new Track_1.Track(trackData, _this.header);\n      });\n      // If it's format 1 and there are no notes on the first track, remove it.\n      if (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n        this.tracks.shift();\n      }\n    }\n  }\n  /**\n   * Download and parse the MIDI file. Returns a promise\n   * which resolves to the generated MIDI file.\n   * @param url The URL to fetch.\n   */\n  Midi.fromUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, arrayBuffer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fetch(url)];\n          case 1:\n            response = _a.sent();\n            if (!response.ok) return [3 /*break*/, 3];\n            return [4 /*yield*/, response.arrayBuffer()];\n          case 2:\n            arrayBuffer = _a.sent();\n            return [2 /*return*/, new Midi(arrayBuffer)];\n          case 3:\n            throw new Error(\"Could not load '\".concat(url, \"'\"));\n        }\n      });\n    });\n  };\n  Object.defineProperty(Midi.prototype, \"name\", {\n    /**\n     * The name of the midi file, taken from the first track.\n     */\n    get: function () {\n      return this.header.name;\n    },\n    set: function (n) {\n      this.header.name = n;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Midi.prototype, \"duration\", {\n    /**\n     * The total length of the file in seconds.\n     */\n    get: function () {\n      // Get the max of the last note of all the tracks.\n      var durations = this.tracks.map(function (t) {\n        return t.duration;\n      });\n      return Math.max.apply(Math, durations);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Midi.prototype, \"durationTicks\", {\n    /**\n     * The total length of the file in ticks.\n     */\n    get: function () {\n      // Get the max of the last note of all the tracks.\n      var durationTicks = this.tracks.map(function (t) {\n        return t.durationTicks;\n      });\n      return Math.max.apply(Math, durationTicks);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Add a track to the MIDI file.\n   */\n  Midi.prototype.addTrack = function () {\n    var track = new Track_1.Track(undefined, this.header);\n    this.tracks.push(track);\n    return track;\n  };\n  /**\n   * Encode the MIDI as a Uint8Array.\n   */\n  Midi.prototype.toArray = function () {\n    return (0, Encode_1.encode)(this);\n  };\n  /**\n   * Convert the MIDI object to JSON.\n   */\n  Midi.prototype.toJSON = function () {\n    return {\n      header: this.header.toJSON(),\n      tracks: this.tracks.map(function (track) {\n        return track.toJSON();\n      })\n    };\n  };\n  /**\n   * Parse a JSON representation of the object. Will overwrite the current\n   * tracks and header.\n   */\n  Midi.prototype.fromJSON = function (json) {\n    var _this = this;\n    this.header = new Header_1.Header();\n    this.header.fromJSON(json.header);\n    this.tracks = json.tracks.map(function (trackJSON) {\n      var track = new Track_1.Track(undefined, _this.header);\n      track.fromJSON(trackJSON);\n      return track;\n    });\n  };\n  /**\n   * Clone the entire object MIDI object.\n   */\n  Midi.prototype.clone = function () {\n    var midi = new Midi();\n    midi.fromJSON(this.toJSON());\n    return midi;\n  };\n  return Midi;\n}();\nexports.Midi = Midi;\nvar Track_2 = require(\"./Track\");\nObject.defineProperty(exports, \"Track\", {\n  enumerable: true,\n  get: function () {\n    return Track_2.Track;\n  }\n});\nvar Header_2 = require(\"./Header\");\nObject.defineProperty(exports, \"Header\", {\n  enumerable: true,\n  get: function () {\n    return Header_2.Header;\n  }\n});\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks) {\n  var newTracks = [];\n  for (var i = 0; i < tracks.length; i++) {\n    var defaultTrack = newTracks.length;\n    // a map from [program, channel] tuples to new track numbers\n    var trackMap = new Map();\n    // a map from channel numbers to current program numbers\n    var currentProgram = Array(16).fill(0);\n    for (var _i = 0, _a = tracks[i]; _i < _a.length; _i++) {\n      var event_1 = _a[_i];\n      var targetTrack = defaultTrack;\n      // If the event has a channel, we need to find that channel's current\n      // program number and the appropriate track for this [program, channel]\n      // pair.\n      var channel = event_1.channel;\n      if (channel !== undefined) {\n        if (event_1.type === \"programChange\") {\n          currentProgram[channel] = event_1.programNumber;\n        }\n        var program = currentProgram[channel];\n        var trackKey = \"\".concat(program, \" \").concat(channel);\n        if (trackMap.has(trackKey)) {\n          targetTrack = trackMap.get(trackKey);\n        } else {\n          targetTrack = defaultTrack + trackMap.size;\n          trackMap.set(trackKey, targetTrack);\n        }\n      }\n      if (!newTracks[targetTrack]) {\n        newTracks.push([]);\n      }\n      newTracks[targetTrack].push(event_1);\n    }\n  }\n  return newTracks;\n}","map":{"version":3,"names":["midi_file_1","require","Header_1","Track_1","Encode_1","Midi","midiArray","_this","midiData","midiArrayLike","ArrayBuffer","Uint8Array","parseMidi","tracks","forEach","track","currentTicks","event","deltaTime","absoluteTime","splitTracks","header","Header","map","trackData","Track","format","duration","shift","fromUrl","url","fetch","response","_a","sent","ok","arrayBuffer","Error","concat","Object","defineProperty","prototype","get","name","set","n","durations","t","Math","max","apply","durationTicks","addTrack","undefined","push","toArray","encode","toJSON","fromJSON","json","trackJSON","clone","midi","exports","Track_2","enumerable","Header_2","newTracks","i","length","defaultTrack","trackMap","Map","currentProgram","Array","fill","_i","event_1","targetTrack","channel","type","programNumber","program","trackKey","has","size"],"sources":["/Users/niko/Documents/PAL-Imperator/node_modules/@tonejs/midi/src/Midi.ts"],"sourcesContent":["import type {\n\tMidiData,\n\tMidiEvent\n} from \"midi-file\";\n\nimport { parseMidi } from \"midi-file\";\n\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\nimport { encode } from \"./Encode\";\n\n/**\n * The main midi parsing class.\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated MIDI file.\n\t * @param url The URL to fetch.\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`Could not load '${url}'`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\t\t// Parse the MIDI data if there is any.\n\t\tlet midiData: (MidiData | null) = null;\n\t\tif (midiArray) {\n\t\t\t// Transform midiArray to ArrayLike<number>\n\t\t\t// only if it's an ArrayBuffer.\n\t\t\tconst midiArrayLike: ArrayLike<number> = midiArray instanceof ArrayBuffer\n\t\t\t\t? new Uint8Array(midiArray)\n\t\t\t\t: midiArray;\n\n\t\t\t// Parse MIDI data.\n\t\t\tmidiData = parseMidi(midiArrayLike);\n\n\t\t\t// Add the absolute times to each of the tracks.\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; }) => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Ensure at most one instrument per track.\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// Parse MIDI data.\n\t\tif (midiArray) {\n\t\t\t// Format 0, everything is on the same track.\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// If it's format 1 and there are no notes on the first track, remove it.\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track.\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds.\n\t */\n\tget duration(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks.\n\t */\n\tget durationTicks(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the MIDI file.\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the MIDI as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the MIDI object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object MIDI object.\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format.\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: Array<MidiEvent[]>): Array<MidiEvent[]> {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as (MidiEvent & { channel?: number })).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\t\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}