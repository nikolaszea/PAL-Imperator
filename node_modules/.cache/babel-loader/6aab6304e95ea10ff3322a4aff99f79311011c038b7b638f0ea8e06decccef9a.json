{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ControlChange = exports.controlChangeIds = exports.controlChangeNames = void 0;\n/**\n * A map of values to control change names\n * @hidden\n */\nexports.controlChangeNames = {\n  1: \"modulationWheel\",\n  2: \"breath\",\n  4: \"footController\",\n  5: \"portamentoTime\",\n  7: \"volume\",\n  8: \"balance\",\n  10: \"pan\",\n  64: \"sustain\",\n  65: \"portamentoTime\",\n  66: \"sostenuto\",\n  67: \"softPedal\",\n  68: \"legatoFootswitch\",\n  84: \"portamentoControl\"\n};\n/**\n * swap the keys and values\n * @hidden\n */\nexports.controlChangeIds = Object.keys(exports.controlChangeNames).reduce(function (obj, key) {\n  obj[exports.controlChangeNames[key]] = key;\n  return obj;\n}, {});\nvar privateHeaderMap = new WeakMap();\nvar privateCCNumberMap = new WeakMap();\n/**\n * Represents a control change event\n */\nvar ControlChange = /** @class */function () {\n  /**\n   * @param event\n   * @param header\n   */\n  function ControlChange(event, header) {\n    privateHeaderMap.set(this, header);\n    privateCCNumberMap.set(this, event.controllerType);\n    this.ticks = event.absoluteTime;\n    this.value = event.value;\n  }\n  Object.defineProperty(ControlChange.prototype, \"number\", {\n    /**\n     * The controller number\n     */\n    get: function () {\n      return privateCCNumberMap.get(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ControlChange.prototype, \"name\", {\n    /**\n     * return the common name of the control number if it exists\n     */\n    get: function () {\n      if (exports.controlChangeNames[this.number]) {\n        return exports.controlChangeNames[this.number];\n      } else {\n        return null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ControlChange.prototype, \"time\", {\n    /**\n     * The time of the event in seconds\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks);\n    },\n    set: function (t) {\n      var header = privateHeaderMap.get(this);\n      this.ticks = header.secondsToTicks(t);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ControlChange.prototype.toJSON = function () {\n    return {\n      number: this.number,\n      ticks: this.ticks,\n      time: this.time,\n      value: this.value\n    };\n  };\n  return ControlChange;\n}();\nexports.ControlChange = ControlChange;","map":{"version":3,"names":["exports","controlChangeNames","controlChangeIds","Object","keys","reduce","obj","key","privateHeaderMap","WeakMap","privateCCNumberMap","ControlChange","event","header","set","controllerType","ticks","absoluteTime","value","defineProperty","prototype","get","number","ticksToSeconds","t","secondsToTicks","toJSON","time"],"sources":["/Users/niko/Documents/PAL-Imperator/node_modules/@tonejs/midi/src/ControlChange.ts"],"sourcesContent":["import type { MidiControllerEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName =\n\t| \"modulationWheel\"\n\t| \"breath\"\n\t| \"footController\"\n\t| \"portamentoTime\"\n\t| \"volume\"\n\t| \"balance\"\n\t| \"pan\"\n\t| \"sustain\"\n\t| \"portamentoTime\"\n\t| \"sostenuto\"\n\t| \"softPedal\"\n\t| \"legatoFootswitch\"\n\t| \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent & { absoluteTime: number }>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n"],"mappings":";;;;;;AAwBA;;;;AAIaA,OAAA,CAAAC,kBAAkB,GAAqB;EACnD,CAAC,EAAE,iBAAiB;EACpB,CAAC,EAAE,QAAQ;EACX,CAAC,EAAE,gBAAgB;EACnB,CAAC,EAAE,gBAAgB;EACnB,CAAC,EAAE,QAAQ;EACX,CAAC,EAAE,SAAS;EACZ,EAAE,EAAE,KAAK;EACT,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,gBAAgB;EACpB,EAAE,EAAE,WAAW;EACf,EAAE,EAAE,WAAW;EACf,EAAE,EAAE,kBAAkB;EACtB,EAAE,EAAE;CACJ;AAED;;;;AAIaD,OAAA,CAAAE,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACJ,OAAA,CAAAC,kBAAkB,CAAC,CAACI,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG;EAC/ED,GAAG,CAACN,OAAA,CAAAC,kBAAkB,CAACM,GAAG,CAAC,CAAC,GAAGA,GAAG;EAClC,OAAOD,GAAG;AACX,CAAC,EAAE,EAAE,CAAC;AAEN,IAAME,gBAAgB,GAAG,IAAIC,OAAO,EAAyB;AAC7D,IAAMC,kBAAkB,GAAG,IAAID,OAAO,EAAyB;AAE/D;;;AAGA,IAAAE,aAAA;EAYC;;;;EAIA,SAAAA,cAAYC,KAA8D,EAAEC,MAAc;IACzFL,gBAAgB,CAACM,GAAG,CAAC,IAAI,EAAED,MAAM,CAAC;IAClCH,kBAAkB,CAACI,GAAG,CAAC,IAAI,EAAEF,KAAK,CAACG,cAAc,CAAC;IAElD,IAAI,CAACC,KAAK,GAAGJ,KAAK,CAACK,YAAY;IAC/B,IAAI,CAACC,KAAK,GAAGN,KAAK,CAACM,KAAK;EACzB;EAKAf,MAAA,CAAAgB,cAAA,CAAIR,aAAA,CAAAS,SAAA,UAAM;IAHV;;;SAGA,SAAAC,CAAA;MACC,OAAOX,kBAAkB,CAACW,GAAG,CAAC,IAAI,CAAC;IACpC,CAAC;;;;EAKDlB,MAAA,CAAAgB,cAAA,CAAIR,aAAA,CAAAS,SAAA,QAAI;IAHR;;;SAGA,SAAAC,CAAA;MACC,IAAIrB,OAAA,CAAAC,kBAAkB,CAAC,IAAI,CAACqB,MAAM,CAAC,EAAE;QACpC,OAAOtB,OAAA,CAAAC,kBAAkB,CAAC,IAAI,CAACqB,MAAM,CAAC;OACtC,MAAM;QACN,OAAO,IAAI;;IAEb,CAAC;;;;EAKDnB,MAAA,CAAAgB,cAAA,CAAIR,aAAA,CAAAS,SAAA,QAAI;IAHR;;;SAGA,SAAAC,CAAA;MACC,IAAMR,MAAM,GAAGL,gBAAgB,CAACa,GAAG,CAAC,IAAI,CAAC;MACzC,OAAOR,MAAM,CAACU,cAAc,CAAC,IAAI,CAACP,KAAK,CAAC;IACzC,CAAC;SAED,SAAAF,CAASU,CAAS;MACjB,IAAMX,MAAM,GAAGL,gBAAgB,CAACa,GAAG,CAAC,IAAI,CAAC;MACzC,IAAI,CAACL,KAAK,GAAGH,MAAM,CAACY,cAAc,CAACD,CAAC,CAAC;IACtC,CAAC;;;;EAEDb,aAAA,CAAAS,SAAA,CAAAM,MAAM,GAAN;IACC,OAAO;MACNJ,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBN,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBW,IAAI,EAAE,IAAI,CAACA,IAAI;MACfT,KAAK,EAAE,IAAI,CAACA;KACZ;EACF,CAAC;EACF,OAAAP,aAAC;AAAD,CAAC,CA/DD;AAAaX,OAAA,CAAAW,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}