{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = void 0;\nvar midi_file_1 = require(\"midi-file\");\nvar Header_1 = require(\"./Header\");\nvar array_flatten_1 = require(\"array-flatten\");\nfunction encodeNote(note, channel) {\n  return [{\n    absoluteTime: note.ticks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOn\",\n    velocity: Math.floor(note.velocity * 127)\n  }, {\n    absoluteTime: note.ticks + note.durationTicks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOff\",\n    velocity: Math.floor(note.noteOffVelocity * 127)\n  }];\n}\nfunction encodeNotes(track) {\n  return (0, array_flatten_1.flatten)(track.notes.map(function (note) {\n    return encodeNote(note, track.channel);\n  }));\n}\nfunction encodeControlChange(cc, channel) {\n  return {\n    absoluteTime: cc.ticks,\n    channel: channel,\n    controllerType: cc.number,\n    deltaTime: 0,\n    type: \"controller\",\n    value: Math.floor(cc.value * 127)\n  };\n}\nfunction encodeControlChanges(track) {\n  var controlChanges = [];\n  for (var i = 0; i < 127; i++) {\n    if (track.controlChanges.hasOwnProperty(i)) {\n      track.controlChanges[i].forEach(function (cc) {\n        controlChanges.push(encodeControlChange(cc, track.channel));\n      });\n    }\n  }\n  return controlChanges;\n}\nfunction encodePitchBend(pb, channel) {\n  return {\n    absoluteTime: pb.ticks,\n    channel: channel,\n    deltaTime: 0,\n    type: \"pitchBend\",\n    value: pb.value\n  };\n}\nfunction encodePitchBends(track) {\n  var pitchBends = [];\n  track.pitchBends.forEach(function (pb) {\n    pitchBends.push(encodePitchBend(pb, track.channel));\n  });\n  return pitchBends;\n}\nfunction encodeInstrument(track) {\n  return {\n    absoluteTime: 0,\n    channel: track.channel,\n    deltaTime: 0,\n    programNumber: track.instrument.number,\n    type: \"programChange\"\n  };\n}\nfunction encodeTrackName(name) {\n  return {\n    absoluteTime: 0,\n    deltaTime: 0,\n    meta: true,\n    text: name,\n    type: \"trackName\"\n  };\n}\nfunction encodeTempo(tempo) {\n  return {\n    absoluteTime: tempo.ticks,\n    deltaTime: 0,\n    meta: true,\n    microsecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n    type: \"setTempo\"\n  };\n}\nfunction encodeTimeSignature(timeSig) {\n  return {\n    absoluteTime: timeSig.ticks,\n    deltaTime: 0,\n    denominator: timeSig.timeSignature[1],\n    meta: true,\n    metronome: 24,\n    numerator: timeSig.timeSignature[0],\n    thirtyseconds: 8,\n    type: \"timeSignature\"\n  };\n}\n// function encodeMeta(event: )\nfunction encodeKeySignature(keySig) {\n  var keyIndex = Header_1.keySignatureKeys.indexOf(keySig.key);\n  return {\n    absoluteTime: keySig.ticks,\n    deltaTime: 0,\n    key: keyIndex + 7,\n    meta: true,\n    scale: keySig.scale === \"major\" ? 0 : 1,\n    type: \"keySignature\"\n  };\n}\nfunction encodeText(textEvent) {\n  return {\n    absoluteTime: textEvent.ticks,\n    deltaTime: 0,\n    meta: true,\n    text: textEvent.text,\n    type: textEvent.type\n  };\n}\n/**\n * Convert the MIDI object to an array.\n */\nfunction encode(midi) {\n  var midiData = {\n    header: {\n      format: 1,\n      numTracks: midi.tracks.length + 1,\n      ticksPerBeat: midi.header.ppq\n    },\n    tracks: __spreadArray([__spreadArray(__spreadArray(__spreadArray(__spreadArray([\n    // The name data.\n    {\n      absoluteTime: 0,\n      deltaTime: 0,\n      meta: true,\n      text: midi.header.name,\n      type: \"trackName\"\n    }], midi.header.keySignatures.map(function (keySig) {\n      return encodeKeySignature(keySig);\n    }), true), midi.header.meta.map(function (e) {\n      return encodeText(e);\n    }), true), midi.header.tempos.map(function (tempo) {\n      return encodeTempo(tempo);\n    }), true), midi.header.timeSignatures.map(function (timeSig) {\n      return encodeTimeSignature(timeSig);\n    }), true)], midi.tracks.map(function (track) {\n      return __spreadArray(__spreadArray(__spreadArray([\n      // Add the name\n      encodeTrackName(track.name),\n      // the instrument\n      encodeInstrument(track)], encodeNotes(track), true), encodeControlChanges(track), true), encodePitchBends(track), true);\n    }), true)\n  };\n  // Sort and set `deltaTime` of all of the tracks.\n  midiData.tracks = midiData.tracks.map(function (track) {\n    track = track.sort(function (a, b) {\n      return a.absoluteTime - b.absoluteTime;\n    });\n    var lastTime = 0;\n    track.forEach(function (note) {\n      note.deltaTime = note.absoluteTime - lastTime;\n      lastTime = note.absoluteTime;\n      delete note.absoluteTime;\n    });\n    // End of track.\n    track.push({\n      deltaTime: 0,\n      meta: true,\n      type: \"endOfTrack\"\n    });\n    return track;\n  });\n  // Rreturn `midiData`.\n  return new Uint8Array((0, midi_file_1.writeMidi)(midiData));\n}\nexports.encode = encode;","map":{"version":3,"names":["midi_file_1","require","Header_1","array_flatten_1","encodeNote","note","channel","absoluteTime","ticks","deltaTime","noteNumber","midi","type","velocity","Math","floor","durationTicks","noteOffVelocity","encodeNotes","track","flatten","notes","map","encodeControlChange","cc","controllerType","number","value","encodeControlChanges","controlChanges","i","hasOwnProperty","forEach","push","encodePitchBend","pb","encodePitchBends","pitchBends","encodeInstrument","programNumber","instrument","encodeTrackName","name","meta","text","encodeTempo","tempo","microsecondsPerBeat","bpm","encodeTimeSignature","timeSig","denominator","timeSignature","metronome","numerator","thirtyseconds","encodeKeySignature","keySig","keyIndex","keySignatureKeys","indexOf","key","scale","encodeText","textEvent","encode","midiData","header","format","numTracks","tracks","length","ticksPerBeat","ppq","__spreadArray","keySignatures","e","tempos","timeSignatures","sort","a","b","lastTime","Uint8Array","writeMidi","exports"],"sources":["/Users/niko/Documents/PAL-Imperator/node_modules/@tonejs/midi/src/Encode.ts"],"sourcesContent":["import { writeMidi } from \"midi-file\";\n\nimport type {\n\tMidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiEvent, MidiKeySignatureEvent,\n\tMidiNoteOffEvent, MidiNoteOnEvent, MidiPitchBendEvent,\n\tMidiProgramChangeEvent, MidiSetTempoEvent, MidiTextEvent,\n\tMidiTimeSignatureEvent, MidiTrackNameEvent\n} from \"midi-file\";\n\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\n\nimport { flatten } from \"array-flatten\";\n\n/** Used to add `absoluteTime` property. */\ntype WithAbsoluteTime = { absoluteTime: number };\n\nfunction encodeNote(note: Note, channel: number): [\n\t(MidiNoteOnEvent & WithAbsoluteTime),\n\t(MidiNoteOffEvent & WithAbsoluteTime)\n] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(\n\tcc: ControlChange,\n\tchannel: number\n): (MidiControllerEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: Math.floor(cc.value * 127),\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(\n\tpb: PitchBend,\n\tchannel: number\n): (MidiPitchBendEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): (MidiProgramChangeEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): (MidiTrackNameEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): (MidiSetTempoEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): (MidiTimeSignatureEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): (MidiKeySignatureEvent & WithAbsoluteTime) {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(\n\ttextEvent: (MetaEvent & { ticks: number; })\n): (MidiTextEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as (MidiTextEvent & WithAbsoluteTime);\n}\n\n/**\n * Convert the MIDI object to an array.\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// The name data.\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data.\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// The remaining tracks.\n\t\t\t...midi.tracks.map((track) => {\n\t\t\t\treturn [\n\t\t\t\t\t// Add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends.\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// Sort and set `deltaTime` of all of the tracks.\n\tmidiData.tracks = midiData.tracks.map((track: (MidiEvent & WithAbsoluteTime)[]) => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\t\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\n\t\t// End of track.\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as (MidiEndOfTrackEvent & WithAbsoluteTime));\n\t\treturn track;\n\t});\n\n\t// Rreturn `midiData`.\n\treturn new Uint8Array(writeMidi(midiData));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}