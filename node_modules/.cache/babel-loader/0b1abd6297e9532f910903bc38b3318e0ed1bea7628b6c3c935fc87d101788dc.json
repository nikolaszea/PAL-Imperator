{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Note = void 0;\n/**\n * Convert a MIDI note into a pitch.\n */\nfunction midiToPitch(midi) {\n  var octave = Math.floor(midi / 12) - 1;\n  return midiToPitchClass(midi) + octave.toString();\n}\n/**\n * Convert a MIDI note to a pitch class (just the pitch no octave).\n */\nfunction midiToPitchClass(midi) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  var note = midi % 12;\n  return scaleIndexToNote[note];\n}\n/**\n * Convert a pitch class to a MIDI note.\n */\nfunction pitchClassToMidi(pitch) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  return scaleIndexToNote.indexOf(pitch);\n}\n/**\n * Convert a pitch to a MIDI number.\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nvar pitchToMidi = function () {\n  var regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n  var noteToScaleIndex = {\n    // tslint:disable-next-line: object-literal-sort-keys\n    cbb: -2,\n    cb: -1,\n    c: 0,\n    \"c#\": 1,\n    cx: 2,\n    dbb: 0,\n    db: 1,\n    d: 2,\n    \"d#\": 3,\n    dx: 4,\n    ebb: 2,\n    eb: 3,\n    e: 4,\n    \"e#\": 5,\n    ex: 6,\n    fbb: 3,\n    fb: 4,\n    f: 5,\n    \"f#\": 6,\n    fx: 7,\n    gbb: 5,\n    gb: 6,\n    g: 7,\n    \"g#\": 8,\n    gx: 9,\n    abb: 7,\n    ab: 8,\n    a: 9,\n    \"a#\": 10,\n    ax: 11,\n    bbb: 9,\n    bb: 10,\n    b: 11,\n    \"b#\": 12,\n    bx: 13\n  };\n  return function (note) {\n    var split = regexp.exec(note);\n    var pitch = split[1];\n    var octave = split[2];\n    var index = noteToScaleIndex[pitch.toLowerCase()];\n    return index + (parseInt(octave, 10) + 1) * 12;\n  };\n}();\nvar privateHeaderMap = new WeakMap();\n/**\n * A Note consists of a `noteOn` and `noteOff` event.\n */\nvar Note = /** @class */function () {\n  function Note(noteOn, noteOff, header) {\n    privateHeaderMap.set(this, header);\n    this.midi = noteOn.midi;\n    this.velocity = noteOn.velocity;\n    this.noteOffVelocity = noteOff.velocity;\n    this.ticks = noteOn.ticks;\n    this.durationTicks = noteOff.ticks - noteOn.ticks;\n  }\n  Object.defineProperty(Note.prototype, \"name\", {\n    /**\n     * The note name and octave in scientific pitch notation, e.g. \"C4\".\n     */\n    get: function () {\n      return midiToPitch(this.midi);\n    },\n    set: function (n) {\n      this.midi = pitchToMidi(n);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"octave\", {\n    /**\n     * The notes octave number.\n     */\n    get: function () {\n      return Math.floor(this.midi / 12) - 1;\n    },\n    set: function (o) {\n      var diff = o - this.octave;\n      this.midi += diff * 12;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"pitch\", {\n    /**\n     * The pitch class name. e.g. \"A\".\n     */\n    get: function () {\n      return midiToPitchClass(this.midi);\n    },\n    set: function (p) {\n      this.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"duration\", {\n    /**\n     * The duration of the segment in seconds.\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n    },\n    set: function (d) {\n      var header = privateHeaderMap.get(this);\n      var noteEndTicks = header.secondsToTicks(this.time + d);\n      this.durationTicks = noteEndTicks - this.ticks;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"time\", {\n    /**\n     * The time of the event in seconds.\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks);\n    },\n    set: function (t) {\n      var header = privateHeaderMap.get(this);\n      this.ticks = header.secondsToTicks(t);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"bars\", {\n    /**\n     * The number of measures (and partial measures) to this beat.\n     * Takes into account time signature changes.\n     * @readonly\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToMeasures(this.ticks);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Note.prototype.toJSON = function () {\n    return {\n      duration: this.duration,\n      durationTicks: this.durationTicks,\n      midi: this.midi,\n      name: this.name,\n      ticks: this.ticks,\n      time: this.time,\n      velocity: this.velocity\n    };\n  };\n  return Note;\n}();\nexports.Note = Note;","map":{"version":3,"names":["midiToPitch","midi","octave","Math","floor","midiToPitchClass","toString","scaleIndexToNote","note","pitchClassToMidi","pitch","indexOf","pitchToMidi","regexp","noteToScaleIndex","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","e","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","a","ax","bbb","bb","b","bx","split","exec","index","toLowerCase","parseInt","privateHeaderMap","WeakMap","Note","noteOn","noteOff","header","set","velocity","noteOffVelocity","ticks","durationTicks","Object","defineProperty","prototype","get","n","o","diff","p","ticksToSeconds","noteEndTicks","secondsToTicks","time","t","ticksToMeasures","toJSON","duration","name","exports"],"sources":["/Users/niko/Documents/PAL-Imperator/node_modules/@tonejs/midi/src/Note.ts"],"sourcesContent":["import { Header } from \"./Header\";\n\n/**\n * Convert a MIDI note into a pitch.\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a MIDI note to a pitch class (just the pitch no octave).\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note.\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a MIDI number.\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a `noteOn` and `noteOff` event.\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes MIDI value.\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1).\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off.\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks.\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks.\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\".\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number.\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\".\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds.\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds.\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes.\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}