{"ast":null,"code":"import React,{useState}from'react';import{extractMidiFromAudio}from'../utils/midiExtractor';import{jsx as _jsx}from\"react/jsx-runtime\";export const CommandInterface=_ref=>{let{mode,file}=_ref;const[isExtracting,setIsExtracting]=useState(false);const handleExtractMidi=async()=>{if(file){setIsExtracting(true);try{const midiBlob=await extractMidiFromAudio(file);const url=URL.createObjectURL(midiBlob);const link=document.createElement('a');link.href=url;link.download=`${file.name.split('.').slice(0,-1).join('.')}-extracted-midi.mid`;link.click();URL.revokeObjectURL(url);}catch(error){console.error('Error extracting MIDI:',error);}finally{setIsExtracting(false);}}};return/*#__PURE__*/_jsx(\"div\",{children:mode==='Music'&&/*#__PURE__*/_jsx(\"button\",{onClick:handleExtractMidi,disabled:!file||isExtracting,children:isExtracting?'Extracting...':'Extract MIDI'})});};","map":{"version":3,"names":["React","useState","extractMidiFromAudio","jsx","_jsx","CommandInterface","_ref","mode","file","isExtracting","setIsExtracting","handleExtractMidi","midiBlob","url","URL","createObjectURL","link","document","createElement","href","download","name","split","slice","join","click","revokeObjectURL","error","console","children","onClick","disabled"],"sources":["/Users/niko/Documents/PAL-Imperator/src/components/CommandInterface.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { extractMidiFromAudio } from '../utils/midiExtractor';\n\ninterface CommandInterfaceProps {\n  mode: 'Music' | 'Literature' | 'Other';\n  file: File | null;\n}\n\nexport const CommandInterface: React.FC<CommandInterfaceProps> = ({ mode, file }) => {\n  const [isExtracting, setIsExtracting] = useState(false);\n\n  const handleExtractMidi = async () => {\n    if (file) {\n      setIsExtracting(true);\n      try {\n        const midiBlob = await extractMidiFromAudio(file);\n        const url = URL.createObjectURL(midiBlob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${file.name.split('.').slice(0, -1).join('.')}-extracted-midi.mid`;\n        link.click();\n        URL.revokeObjectURL(url);\n      } catch (error) {\n        console.error('Error extracting MIDI:', error);\n      } finally {\n        setIsExtracting(false);\n      }\n    }\n  };\n\n  return (\n    <div>\n      {mode === 'Music' && (\n        <button onClick={handleExtractMidi} disabled={!file || isExtracting}>\n          {isExtracting ? 'Extracting...' : 'Extract MIDI'}\n        </button>\n      )}\n    </div>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,oBAAoB,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAO9D,MAAO,MAAM,CAAAC,gBAAiD,CAAGC,IAAA,EAAoB,IAAnB,CAAEC,IAAI,CAAEC,IAAK,CAAC,CAAAF,IAAA,CAC9E,KAAM,CAACG,YAAY,CAAEC,eAAe,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAEvD,KAAM,CAAAU,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAIH,IAAI,CAAE,CACRE,eAAe,CAAC,IAAI,CAAC,CACrB,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAV,oBAAoB,CAACM,IAAI,CAAC,CACjD,KAAM,CAAAK,GAAG,CAAGC,GAAG,CAACC,eAAe,CAACH,QAAQ,CAAC,CACzC,KAAM,CAAAI,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGN,GAAG,CACfG,IAAI,CAACI,QAAQ,CAAG,GAAGZ,IAAI,CAACa,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CACnFR,IAAI,CAACS,KAAK,CAAC,CAAC,CACZX,GAAG,CAACY,eAAe,CAACb,GAAG,CAAC,CAC1B,CAAE,MAAOc,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CAAC,OAAS,CACRjB,eAAe,CAAC,KAAK,CAAC,CACxB,CACF,CACF,CAAC,CAED,mBACEN,IAAA,QAAAyB,QAAA,CACGtB,IAAI,GAAK,OAAO,eACfH,IAAA,WAAQ0B,OAAO,CAAEnB,iBAAkB,CAACoB,QAAQ,CAAE,CAACvB,IAAI,EAAIC,YAAa,CAAAoB,QAAA,CACjEpB,YAAY,CAAG,eAAe,CAAG,cAAc,CAC1C,CACT,CACE,CAAC,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}