{"ast":null,"code":"import{Midi}from'@tonejs/midi';export const extractMidiFromAudio=async file=>{const arrayBuffer=await file.arrayBuffer();// Process the arrayBuffer to extract MIDI data\n// Note: Actual MIDI extraction from audio needs a proper implementation\nconst midi=new Midi();// Simulate adding a note (replace with actual extraction logic)\nmidi.addTrack().addNote({midi:60,time:0,duration:1});const midiData=midi.toArray();return new Blob([midiData],{type:'audio/midi'});};","map":{"version":3,"names":["Midi","extractMidiFromAudio","file","arrayBuffer","midi","addTrack","addNote","time","duration","midiData","toArray","Blob","type"],"sources":["/Users/niko/Documents/PAL-Imperator/src/utils/midiExtractor.ts"],"sourcesContent":["import { Midi } from '@tonejs/midi';\n\nexport const extractMidiFromAudio = async (file: File): Promise<Blob> => {\n  const arrayBuffer = await file.arrayBuffer();\n  // Process the arrayBuffer to extract MIDI data\n  // Note: Actual MIDI extraction from audio needs a proper implementation\n  const midi = new Midi();\n  // Simulate adding a note (replace with actual extraction logic)\n  midi.addTrack().addNote({\n    midi: 60,\n    time: 0,\n    duration: 1,\n  });\n  const midiData = midi.toArray();\n  return new Blob([midiData], { type: 'audio/midi' });\n};\n"],"mappings":"AAAA,OAASA,IAAI,KAAQ,cAAc,CAEnC,MAAO,MAAM,CAAAC,oBAAoB,CAAG,KAAO,CAAAC,IAAU,EAAoB,CACvE,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAD,IAAI,CAACC,WAAW,CAAC,CAAC,CAC5C;AACA;AACA,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAJ,IAAI,CAAC,CAAC,CACvB;AACAI,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CACtBF,IAAI,CAAE,EAAE,CACRG,IAAI,CAAE,CAAC,CACPC,QAAQ,CAAE,CACZ,CAAC,CAAC,CACF,KAAM,CAAAC,QAAQ,CAAGL,IAAI,CAACM,OAAO,CAAC,CAAC,CAC/B,MAAO,IAAI,CAAAC,IAAI,CAAC,CAACF,QAAQ,CAAC,CAAE,CAAEG,IAAI,CAAE,YAAa,CAAC,CAAC,CACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}