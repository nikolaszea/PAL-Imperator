{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Instrument = void 0;\nvar InstrumentMaps_1 = require(\"./InstrumentMaps\");\n/**\n * @hidden\n */\nvar privateTrackMap = new WeakMap();\n/**\n * Describes the MIDI instrument of a track.\n */\nvar Instrument = /** @class */function () {\n  /**\n   * @param trackData\n   * @param track\n   */\n  function Instrument(trackData, track) {\n    /**\n     * The instrument number. Defaults to 0.\n     */\n    this.number = 0;\n    privateTrackMap.set(this, track);\n    this.number = 0;\n    if (trackData) {\n      var programChange = trackData.find(function (e) {\n        return e.type === \"programChange\";\n      });\n      // Set 'number' from 'programNumber' if exists.\n      if (programChange) {\n        this.number = programChange.programNumber;\n      }\n    }\n  }\n  Object.defineProperty(Instrument.prototype, \"name\", {\n    /**\n     * The common name of the instrument.\n     */\n    get: function () {\n      if (this.percussion) {\n        return InstrumentMaps_1.DrumKitByPatchID[this.number];\n      } else {\n        return InstrumentMaps_1.instrumentByPatchID[this.number];\n      }\n    },\n    set: function (n) {\n      var patchNumber = InstrumentMaps_1.instrumentByPatchID.indexOf(n);\n      if (patchNumber !== -1) {\n        this.number = patchNumber;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"family\", {\n    /**\n     * The instrument family, e.g. \"piano\".\n     */\n    get: function () {\n      if (this.percussion) {\n        return \"drums\";\n      } else {\n        return InstrumentMaps_1.InstrumentFamilyByID[Math.floor(this.number / 8)];\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"percussion\", {\n    /**\n     * If the instrument is a percussion instrument.\n     */\n    get: function () {\n      var track = privateTrackMap.get(this);\n      return track.channel === 9;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Convert it to JSON form.\n   */\n  Instrument.prototype.toJSON = function () {\n    return {\n      family: this.family,\n      number: this.number,\n      name: this.name\n    };\n  };\n  /**\n   * Convert from JSON form.\n   */\n  Instrument.prototype.fromJSON = function (json) {\n    this.number = json.number;\n  };\n  return Instrument;\n}();\nexports.Instrument = Instrument;","map":{"version":3,"names":["InstrumentMaps_1","require","privateTrackMap","WeakMap","Instrument","trackData","track","number","set","programChange","find","e","type","programNumber","Object","defineProperty","prototype","get","percussion","DrumKitByPatchID","instrumentByPatchID","n","patchNumber","indexOf","InstrumentFamilyByID","Math","floor","channel","toJSON","family","name","fromJSON","json","exports"],"sources":["/Users/niko/Documents/PAL-Imperator/node_modules/@tonejs/midi/src/Instrument.ts"],"sourcesContent":["import type {\n\tMidiEvent,\n\tMidiProgramChangeEvent\n} from \"midi-file\";\n\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the MIDI instrument of a track.\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number. Defaults to 0.\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiEvent[], track: Track) {\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(\n\t\t\t\te => e.type === \"programChange\"\n\t\t\t) as MidiProgramChangeEvent;\n\n\t\t\t// Set 'number' from 'programNumber' if exists.\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument.\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument.\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form.\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tnumber: this.number,\n\t\t\tname: this.name\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form.\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tfamily: string;\n\tnumber: number;\n\tname: string;\n}\n"],"mappings":";;;;;;AAKA,IAAAA,gBAAA,GAAAC,OAAA;AAGA;;;AAGA,IAAMC,eAAe,GAAG,IAAIC,OAAO,EAAqB;AAExD;;;AAGA,IAAAC,UAAA;EAOC;;;;EAIA,SAAAA,WAAYC,SAAsB,EAAEC,KAAY;IAThD;;;IAGA,KAAAC,MAAM,GAAG,CAAC;IAOTL,eAAe,CAACM,GAAG,CAAC,IAAI,EAAEF,KAAK,CAAC;IAChC,IAAI,CAACC,MAAM,GAAG,CAAC;IAEf,IAAIF,SAAS,EAAE;MACd,IAAMI,aAAa,GAAGJ,SAAS,CAACK,IAAI,CACnC,UAAAC,CAAC;QAAI,OAAAA,CAAC,CAACC,IAAI,KAAK,eAAe;MAA1B,CAA0B,CACL;MAE3B;MACA,IAAIH,aAAa,EAAE;QAClB,IAAI,CAACF,MAAM,GAAGE,aAAa,CAACI,aAAa;;;EAG5C;EAKAC,MAAA,CAAAC,cAAA,CAAIX,UAAA,CAAAY,SAAA,QAAI;IAHR;;;SAGA,SAAAC,CAAA;MACC,IAAI,IAAI,CAACC,UAAU,EAAE;QACpB,OAAOlB,gBAAA,CAAAmB,gBAAgB,CAAC,IAAI,CAACZ,MAAM,CAAC;OACpC,MAAM;QACN,OAAOP,gBAAA,CAAAoB,mBAAmB,CAAC,IAAI,CAACb,MAAM,CAAC;;IAEzC,CAAC;SAED,SAAAC,CAASa,CAAS;MACjB,IAAMC,WAAW,GAAGtB,gBAAA,CAAAoB,mBAAmB,CAACG,OAAO,CAACF,CAAC,CAAC;MAClD,IAAIC,WAAW,KAAK,CAAC,CAAC,EAAE;QACvB,IAAI,CAACf,MAAM,GAAGe,WAAW;;IAE3B,CAAC;;;;EAKDR,MAAA,CAAAC,cAAA,CAAIX,UAAA,CAAAY,SAAA,UAAM;IAHV;;;SAGA,SAAAC,CAAA;MACC,IAAI,IAAI,CAACC,UAAU,EAAE;QACpB,OAAO,OAAO;OACd,MAAM;QACN,OAAOlB,gBAAA,CAAAwB,oBAAoB,CAACC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACnB,MAAM,GAAG,CAAC,CAAC,CAAC;;IAE1D,CAAC;;;;EAKDO,MAAA,CAAAC,cAAA,CAAIX,UAAA,CAAAY,SAAA,cAAU;IAHd;;;SAGA,SAAAC,CAAA;MACC,IAAMX,KAAK,GAAGJ,eAAe,CAACe,GAAG,CAAC,IAAI,CAAC;MACvC,OAAOX,KAAK,CAACqB,OAAO,KAAK,CAAC;IAC3B,CAAC;;;;EAED;;;EAGAvB,UAAA,CAAAY,SAAA,CAAAY,MAAM,GAAN;IACC,OAAO;MACNC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBtB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBuB,IAAI,EAAE,IAAI,CAACA;KACX;EACF,CAAC;EAED;;;EAGA1B,UAAA,CAAAY,SAAA,CAAAe,QAAQ,GAAR,UAASC,IAAoB;IAC5B,IAAI,CAACzB,MAAM,GAAGyB,IAAI,CAACzB,MAAM;EAC1B,CAAC;EACF,OAAAH,UAAC;AAAD,CAAC,CAjFD;AAAa6B,OAAA,CAAA7B,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}