{"ast":null,"code":"import { Midi } from '@tonejs/midi';\nexport const extractMidiFromAudio = async file => {\n  const arrayBuffer = await file.arrayBuffer();\n  // Process the arrayBuffer to extract MIDI data\n  // Note: Actual MIDI extraction from audio needs a proper implementation\n  const midi = new Midi();\n  // Simulate adding a note (replace with actual extraction logic)\n  midi.addTrack().addNote({\n    midi: 60,\n    time: 0,\n    duration: 1\n  });\n  const midiData = midi.toArray();\n  return new Blob([midiData], {\n    type: 'audio/midi'\n  });\n};","map":{"version":3,"names":["Midi","extractMidiFromAudio","file","arrayBuffer","midi","addTrack","addNote","time","duration","midiData","toArray","Blob","type"],"sources":["/Users/niko/Documents/PAL-Imperator/src/utils/midiExtractor.ts"],"sourcesContent":["import { Midi } from '@tonejs/midi';\n\nexport const extractMidiFromAudio = async (file: File): Promise<Blob> => {\n  const arrayBuffer = await file.arrayBuffer();\n  // Process the arrayBuffer to extract MIDI data\n  // Note: Actual MIDI extraction from audio needs a proper implementation\n  const midi = new Midi();\n  // Simulate adding a note (replace with actual extraction logic)\n  midi.addTrack().addNote({\n    midi: 60,\n    time: 0,\n    duration: 1,\n  });\n  const midiData = midi.toArray();\n  return new Blob([midiData], { type: 'audio/midi' });\n};\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,cAAc;AAEnC,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,IAAU,IAAoB;EACvE,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,CAAC,CAAC;EAC5C;EACA;EACA,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAAC,CAAC;EACvB;EACAI,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC;IACtBF,IAAI,EAAE,EAAE;IACRG,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGL,IAAI,CAACM,OAAO,CAAC,CAAC;EAC/B,OAAO,IAAIC,IAAI,CAAC,CAACF,QAAQ,CAAC,EAAE;IAAEG,IAAI,EAAE;EAAa,CAAC,CAAC;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}